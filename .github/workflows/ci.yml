name: .NET 8 CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        cache: true
        cache-dependency-path: packages.lock.json
        
    - name: Restore dependencies
      run: dotnet restore AustralianTaxCalculator.sln
      
    - name: Build solution
      run: dotnet build AustralianTaxCalculator.sln --no-restore --configuration Release
      
    - name: Run unit tests
      run: dotnet test AustralianTaxCalculator.sln --no-build --configuration Release --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"
      continue-on-error: true
      
    - name: Build individual projects (compatibility check)
      run: |
        echo "=== Building individual projects ==="
        
        # Build Core Library
        if [ -f "TaxCalculator.Core/TaxCalculator.Core.csproj" ]; then
          echo "Building Core Library..."
          dotnet build TaxCalculator.Core/TaxCalculator.Core.csproj --no-restore --configuration Release
        fi
        
        # Build Data Library  
        if [ -f "TaxCalculator.Data/TaxCalculator.Data.csproj" ]; then
          echo "Building Data Library..."
          dotnet build TaxCalculator.Data/TaxCalculator.Data.csproj --no-restore --configuration Release
        fi
        
        # Build Services Library
        if [ -f "TaxCalculator.Services/TaxCalculator.Services.csproj" ]; then
          echo "Building Services Library..."
          dotnet build TaxCalculator.Services/TaxCalculator.Services.csproj --no-restore --configuration Release
        fi
        
        # Build Standalone API
        if [ -f "TaxCalculator.StandaloneApi/TaxCalculator.StandaloneApi.csproj" ]; then
          echo "Building Standalone API..."
          dotnet build TaxCalculator.StandaloneApi/TaxCalculator.StandaloneApi.csproj --no-restore --configuration Release
        fi
        
        # Build Test Client
        if [ -f "ApiTestClient.csproj" ]; then
          echo "Building Test Client..."
          dotnet build ApiTestClient.csproj --no-restore --configuration Release
        fi
        
        # Build Unit Tests
        if [ -f "TaxCalculator.Tests.Unit/TaxCalculator.Tests.Unit.csproj" ]; then
          echo "Building Unit Tests..."
          dotnet build TaxCalculator.Tests.Unit/TaxCalculator.Tests.Unit.csproj --no-restore --configuration Release
        fi
      continue-on-error: true
      
    - name: Verify build artifacts
      run: |
        echo "=== Build Results ==="
        
        # Check for built assemblies (updated paths for .NET 8)
        if [ -f "TaxCalculator.Core/bin/Release/net8.0/TaxCalculator.Core.dll" ]; then
          echo "PASS: Core Library built successfully"
        else
          echo "FAIL: Core Library build failed"
        fi
        
        if [ -f "TaxCalculator.Data/bin/Release/net8.0/TaxCalculator.Data.dll" ]; then
          echo "PASS: Data Library built successfully"
        else
          echo "FAIL: Data Library build failed"
        fi
        
        if [ -f "TaxCalculator.Services/bin/Release/net8.0/TaxCalculator.Services.dll" ]; then
          echo "PASS: Services Library built successfully"
        else
          echo "FAIL: Services Library build failed"
        fi
        
        # Check for executables (Linux compatible)
        if [ -f "TaxCalculator.StandaloneApi/bin/Release/net8.0/TaxCalculator.StandaloneApi" ] || [ -f "TaxCalculator.StandaloneApi/bin/Release/net8.0/TaxCalculator.StandaloneApi.dll" ]; then
          echo "PASS: Standalone API built successfully"
        else
          echo "FAIL: Standalone API build failed"
        fi
        
        if [ -f "bin/Release/net8.0/ApiTestClient" ] || [ -f "bin/Release/net8.0/ApiTestClient.dll" ]; then
          echo "PASS: Test Client built successfully"
        else
          echo "FAIL: Test Client build failed"
        fi
        
        if [ -f "TaxCalculator.Tests.Unit/bin/Release/net8.0/TaxCalculator.Tests.Unit.dll" ]; then
          echo "PASS: Unit Tests built successfully"
        else
          echo "FAIL: Unit Tests build failed"
        fi
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dotnet-test-results-${{ matrix.dotnet-version }}
        path: TestResults-${{ matrix.dotnet-version }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-artifacts-${{ matrix.dotnet-version }}
        path: |
          TaxCalculator.StandaloneApi/bin/Release/
          bin/Release/
          TaxCalculator.Core/bin/Release/
          TaxCalculator.Data/bin/Release/
          TaxCalculator.Services/bin/Release/
          TaxCalculator.Tests.Unit/bin/Release/
          
  code-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Code quality analysis
      run: |
        echo "=== Code Quality Check ==="
        
        # Count C# files
        cs_files=$(find . -name "*.cs" -type f | wc -l)
        echo "Total C# files: $cs_files"
        
        # Count total lines of code
        total_lines=$(find . -name "*.cs" -type f -exec cat {} \; | wc -l)
        echo "Total lines of code: $total_lines"
        
        # Check for .NET 8 compatibility markers
        net8_projects=$(find . -name "*.csproj" -exec grep -l "net8.0" {} \; | wc -l)
        echo ".NET 8 compatible projects: $net8_projects"
        
        echo "Basic code analysis completed"
        
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Security vulnerability scan
      run: |
        echo "=== Security Scan ==="
        
        # Check for hardcoded connection strings
        connection_strings=$(grep -r -i "server=\|data source=\|password=" --include="*.cs" --include="*.config" . | grep -v "//" || true)
        if [ -n "$connection_strings" ]; then
          echo "WARNING: Potential hardcoded connection strings found:"
          echo "$connection_strings"
        else
          echo "No hardcoded connection strings detected"
        fi
        
        # Check for potential secrets
        secrets=$(grep -r -i "apikey\|secret\|password\|token" --include="*.cs" --include="*.config" . | grep -v "//" | grep -v "Password=" || true)
        if [ -n "$secrets" ]; then
          echo "WARNING: Potential secrets or API keys found:"
          echo "$secrets"
        else
          echo "No obvious secrets detected"
        fi
        
        # Check for .NET 8 security best practices
        echo "Checking .NET 8 security recommendations..."
        
        # Look for secure coding patterns
        if grep -r "ConfigureServices\|ConfigureWebHostDefaults" --include="*.cs" . > /dev/null; then
          echo "Modern .NET configuration patterns detected"
        fi
        
        echo "Security scan completed"

  compatibility-check:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Cross-platform compatibility verification
      run: |
        echo "=== Cross-Platform Compatibility Check ==="
        
        # Verify Linux compatibility
        echo "Running on Linux: $(uname -a)"
        echo ".NET version: $(dotnet --version)"
        
        # Check for Windows-specific code patterns
        windows_patterns=$(grep -r "System.Windows\|Microsoft.Win32\|P/Invoke" --include="*.cs" . || true)
        if [ -n "$windows_patterns" ]; then
          echo "WARNING: Windows-specific code detected - may need attention:"
          echo "$windows_patterns"
        else
          echo "No obvious Windows-specific dependencies found"
        fi
        
        # Check file path separators
        backslash_paths=$(grep -r "\\\\" --include="*.cs" . || true)
        if [ -n "$backslash_paths" ]; then
          echo "WARNING: Windows-style path separators found:"
          echo "$backslash_paths"
        else
          echo "No hardcoded Windows path separators detected"
        fi
        
        echo "Compatibility check completed"
